#include <stdio.h>
#include <string.h>

// Function prototypes
void encrypt(char message[], int shift);
void decrypt(char message[], int shift);

int main() {
    char message[256];
    int choice, shift;

    printf("Caesar Cipher Encryption/Decryption\n");
    
    // Get user's choice for encryption or decryption
    printf("Choose an option:\n");
    printf("1. Encrypt a message\n");
    printf("2. Decrypt a message\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &choice);

    // Get shift value and message
    printf("Enter the shift value: ");
    scanf("%d", &shift);
    getchar(); // to clear the newline character left by scanf

    printf("Enter the message: ");
    fgets(message, sizeof(message), stdin);
    message[strcspn(message, "\n")] = '\0'; // Remove newline character

    // Perform encryption or decryption based on user choice
    if (choice == 1) {
        encrypt(message, shift);
        printf("Encrypted message: %s\n", message);
    } else if (choice == 2) {
        decrypt(message, shift);
        printf("Decrypted message: %s\n", message);
    } else {
        printf("Invalid choice. Please select 1 or 2.\n");
    }

    return 0;
}

// Function to encrypt the message
void encrypt(char message[], int shift) {
    for (int i = 0; message[i] != '\0'; i++) {
        char ch = message[i];

        // Encrypt uppercase letters
        if (ch >= 'A' && ch <= 'Z') {
            message[i] = ((ch - 'A' + shift) % 26) + 'A';
        }
        // Encrypt lowercase letters
        else if (ch >= 'a' && ch <= 'z') {
            message[i] = ((ch - 'a' + shift) % 26) + 'a';
        }
        // Leave other characters unchanged
    }
}

// Function to decrypt the message
void decrypt(char message[], int shift) {
    for (int i = 0; message[i] != '\0'; i++) {
        char ch = message[i];

        // Decrypt uppercase letters
        if (ch >= 'A' && ch <= 'Z') {
            message[i] = ((ch - 'A' - shift + 26) % 26) + 'A';
        }
        // Decrypt lowercase letters
        else if (ch >= 'a' && ch <= 'z') {
            message[i] = ((ch - 'a' - shift + 26) % 26) + 'a';
        }
        // Leave other characters unchanged
    }
}
